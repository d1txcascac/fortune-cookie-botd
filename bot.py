import os
import json
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
from PIL import Image, ImageDraw, ImageFont
import io

# Load environment variables
load_dotenv()

# Load predictions from JSON
def load_predictions():
    with open('predictions.json', 'r', encoding='utf-8') as f:
        return json.load(f)

# Create prediction image
def create_prediction_image(text, emoji):
    # Create a new image with a white background
    img = Image.new('RGB', (800, 400), color='white')
    d = ImageDraw.Draw(img)
    
    # Add text to image
    try:
        font = ImageFont.truetype("arial.ttf", 36)
    except:
        font = ImageFont.load_default()
    
    d.text((400, 200), text, fill='black', font=font, anchor="mm")
    d.text((400, 300), emoji, fill='black', font=font, anchor="mm")
    
    # Save to bytes
    img_byte_arr = io.BytesIO()
    img.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)
    return img_byte_arr

# Start command
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = """–ü—Ä–∏–≤–µ—Ç, —Ç–∏–∫—Ç–æ–∫–µ—Ä! ü•† –Ø –±–æ—Ç-–ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å! 

–ù–∞–ø–∏—à–∏ /predict [—Ç–≤–æ—ë –∏–º—è] [—ç–º–æ–¥–∑–∏], —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç! 
–ù–∞–ø—Ä–∏–º–µ—Ä: /predict –ö–∞—Ç—è üòé

–•–æ—á–µ—à—å –º–µ–º–Ω—ã–π –≤–∞–π–± –∏–ª–∏ –º–∏—Å—Ç–∏–∫—É? –ü–æ–≥–Ω–∞–ª–∏! üöÄ"""
    await update.message.reply_text(welcome_message)

# Predict command
async def predict_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # Parse command arguments
        args = context.args
        if len(args) < 1:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è! –ù–∞–ø—Ä–∏–º–µ—Ä: /predict –ö–∞—Ç—è üòé")
            return
        
        name = args[0]
        emoji = args[1] if len(args) > 1 else random.choice(['üòé', 'üåô', 'üê±'])
        
        # Load predictions
        predictions = load_predictions()
        
        # Select prediction based on emoji
        if emoji == 'üòé':
            category = 'humor'
        elif emoji == 'üåô':
            category = 'mystic'
        else:
            category = 'meme'
            
        prediction = random.choice(predictions[category]).format(name=name)
        
        # Create and send image
        img = create_prediction_image(prediction, emoji)
        await update.message.reply_photo(
            photo=img,
            caption=f"{prediction}\n\n–ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–∏–º –≤ TikTok! #–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"
        )
        
    except Exception as e:
        await update.message.reply_text("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

# Share command
async def share_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    share_text = """–ú–æ—ë –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç @FortuneCookieBot! 
–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—ë! ü•† #–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    await update.message.reply_text(share_text)

# Help command
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """–ò—Å–ø–æ–ª—å–∑—É–π /predict [–∏–º—è] [—ç–º–æ–¥–∑–∏] –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è! 
üòé ‚Äî –¥–µ—Ä–∑–∫–æ–µ
üåô ‚Äî –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ
üê± ‚Äî –º–µ–º–Ω–æ–µ

–î–µ–ª–∏—Å—å –≤ TikTok! üöÄ"""
    await update.message.reply_text(help_text)

# Donate command
async def donate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    donate_text = """–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ—Ç? üò∫ 
–ü–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ —á–µ—Ä–µ–∑ –ÆMoney: [—Å—Å—ã–ª–∫–∞]
–î–∞–∂–µ 10 —Ä—É–±–ª–µ–π –ø–æ–º–æ–≥—É—Ç! üôå"""
    await update.message.reply_text(donate_text)

async def main():
    # Create application
    application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()

    # Add command handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("predict", predict_command))
    application.add_handler(CommandHandler("share", share_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("donate", donate_command))

    # Start the bot
    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main()) 