require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const Jimp = require('jimp');
const fs = require('fs');
const { GoogleGenerativeAI } = require("@google/generative-ai");
const express = require('express');

const app = express();
app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–∑ JSON
const predictions = JSON.parse(fs.readFileSync('predictions.json', 'utf8'));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç Gemini
async function getGeminiPrediction(name, category) {
    try {
        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });

        const prompt = `–¢—ã ‚Äî TikTok-–æ—Ä–∞–∫—É–ª Fortune Cookie Bot. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –æ—á–µ–Ω—å —á–µ–ª–æ–≤–µ—á–Ω–æ–µ, –ø–æ–¥—Ä–æ–±–Ω–æ–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ ${name}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category === 'humor' ? '—é–º–æ—Ä (—Å–º–µ—à–Ω–æ, –¥–µ—Ä–∑–∫–æ, —Å –º–µ–º–∞–º–∏)' : category === 'mystic' ? '–º–∏—Å—Ç–∏–∫–∞ (—Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–≥–∞–¥–æ—á–Ω–æ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ)' : '–º–µ–º—ã (–∏—Ä–æ–Ω–∏—á–Ω–æ, —Å –≤–∞–π–±–æ–º TikTok)'}.

–ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –æ–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ (${name}), –¥–æ–±–∞–≤–ª—è–π –¥–µ—Ç–∞–ª–∏, —ç–º–æ—Ü–∏–∏, TikTok-–≤–∞–π–±. –í –ö–û–ù–¶–ï –ö–ê–ñ–î–û–ì–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å—Ç–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üòé, üåô, üê±, ‚ú®, üöÄ, üò∫, –∏ —Ç.–¥.). –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 70 —Å–ª–æ–≤. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∫–æ—Ä–æ—á–µ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ø–æ–ª–Ω–∏ –µ–≥–æ! –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å—É—Ö–æ–π —Å—Ç–∏–ª—å, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π —à–∞–±–ª–æ–Ω—ã. –°–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—ã–ª–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–ª–∏–Ω–Ω–æ–µ, —Ç—ë–ø–ª–æ–µ, –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–ª–∏–∑–∫–æ–≥–æ –¥—Ä—É–≥–∞, –∞ –Ω–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É.`;

        const result = await model.generateContent(prompt);
        const response = await result.response;
        return response.text().trim();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç Gemini:', error);
        return predictions[category][Math.floor(Math.random() * predictions[category].length)]
            .replace('{name}', name);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
async function createPredictionImage(text, emoji) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const image = new Jimp(800, 400, 0xffffffff);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç
    const font = await Jimp.loadFont(Jimp.FONT_SANS_32_BLACK);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    const textWidth = Jimp.measureText(font, text);
    const textX = (800 - textWidth) / 2;
    
    // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
    image.print(font, textX, 150, text);
    image.print(font, 350, 250, emoji);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
    return image.getBufferAsync(Jimp.MIME_PNG);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, —Ç–∏–∫—Ç–æ–∫–µ—Ä! ü•† –Ø –±–æ—Ç-–ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å! 

–ù–∞–ø–∏—à–∏ /predict [—Ç–≤–æ—ë –∏–º—è] [—ç–º–æ–¥–∑–∏], —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç! 
–ù–∞–ø—Ä–∏–º–µ—Ä: /predict –ö–∞—Ç—è üòé

–•–æ—á–µ—à—å –º–µ–º–Ω—ã–π –≤–∞–π–± –∏–ª–∏ –º–∏—Å—Ç–∏–∫—É? –ü–æ–≥–Ω–∞–ª–∏! üöÄ`;
    
    bot.sendMessage(msg.chat.id, welcomeMessage);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /predict
bot.onText(/\/predict (.+)/, async (msg, match) => {
    try {
        const args = match[1].split(' ');
        const name = args[0];
        const emoji = args[1] || ['üòé', 'üåô', 'üê±'][Math.floor(Math.random() * 3)];

        // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ–¥–∑–∏
        let category;
        if (emoji === 'üòé') category = 'humor';
        else if (emoji === 'üåô') category = 'mystic';
        else category = 'meme';

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç Gemini
        const prediction = await getGeminiPrediction(name, category);

        // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const imageBuffer = await createPredictionImage(prediction, emoji);
        await bot.sendPhoto(msg.chat.id, imageBuffer, {
            caption: `${prediction}\n\n–ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–∏–º –≤ TikTok! #–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è`
        });
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞:', e);
        bot.sendMessage(msg.chat.id, "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!");
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /share
bot.onText(/\/share/, (msg) => {
    const shareText = `–ú–æ—ë –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç @FortuneCookieBot! 
–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—ë! ü•† #–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è`;
    
    bot.sendMessage(msg.chat.id, shareText);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
    const helpText = `–ò—Å–ø–æ–ª—å–∑—É–π /predict [–∏–º—è] [—ç–º–æ–¥–∑–∏] –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è! 
üòé ‚Äî –¥–µ—Ä–∑–∫–æ–µ
üåô ‚Äî –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ
üê± ‚Äî –º–µ–º–Ω–æ–µ

–î–µ–ª–∏—Å—å –≤ TikTok! üöÄ`;
    
    bot.sendMessage(msg.chat.id, helpText);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /donate
bot.onText(/\/donate/, (msg) => {
    const donateText = `–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ—Ç? üò∫ 
–ü–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ —á–µ—Ä–µ–∑ –ÆMoney: [—Å—Å—ã–ª–∫–∞]
–î–∞–∂–µ 10 —Ä—É–±–ª–µ–π –ø–æ–º–æ–≥—É—Ç! üôå`;
    
    bot.sendMessage(msg.chat.id, donateText);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö POST –∑–∞–ø—Ä–æ—Å–æ–≤
app.post('/', (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', req.body);
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3001;
app.listen(PORT, async () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    
    try {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook –µ—Å–ª–∏ –µ—Å—Ç—å
        await bot.deleteWebHook();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        const webhookUrl = process.env.WEBHOOK_URL;
        await bot.setWebHook(webhookUrl);
        console.log('Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookUrl);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        const webhookInfo = await bot.getWebHookInfo();
        console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', webhookInfo);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:', error);
    }
}); 